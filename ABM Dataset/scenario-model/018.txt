a Bounded Confidence Model with finite Ages
{"Objects Definition": [{"name": "Agent", "states": [{"name": "Birthday", "description": "uniform random integer"}, {"name": "ID", "description": ""}, {"name": "Opinion", "description": ""}, {"name": "Opinion", "description": ""}, {"name": "histOpinion", "description": ""}, {"name": "histOpinion", "description": ""}, {"name": "Opinion", "description": ""}, {"name": "Pos", "description": ""}], "interactions & activities": [{"name": "__repr__", "description": " return string for representation in ipython"}, {"name": "age", "description": " input date current time return age of an agent"}]}, {"name": "Population", "states": [{"name": "rate", "description": "probability to spawn bunch of new agents at any timestep"}, {"name": "N", "description": ""}, {"name": "runningAgentID", "description": ""}, {"name": "runningGroupID", "description": ""}, {"name": "Agents", "description": ""}, {"name": "Elders", "description": ""}, {"name": "setup_uniform_age", "description": ""}], "interactions & activities": [{"name": "__repr__", "description": " return string for representation in ipython"}, {"name": "setup_uniform_age", "description": " create agents with age uniformly distributed between 0 and maxage input is the number of agents"}, {"name": "get_opinions", "description": " return opinions of all agents"}, {"name": "find_agents", "description": " locate all agents within bracket of the group, return their IDs input param mean mean opinion input param std standard deviation of opinions in group input return ID list of all Agents in bracket [mean-std, mean+std]"}, {"name": "get_groups", "description": " identify groups in opinion space via hierarchical clustering input param spread minimum distance between agents to classify as separate groups"}, {"name": "get_ages", "description": " get ages of all previously live agents at a given time input param date current time"}, {"name": "add_agents", "description": " spawn N agents to population input param n number input param date current date, if not given: distribute ages uniformly within maxage input param opinion fixed opinion; if not given: distribute opinions uniformly within [0,1]"}, {"name": "clear_old", "description": " remove agents that reached end of their lifetime input param date current date, needed for age calculation"}, {"name": "distance", "description": ""}, {"name": "opinion_diff", "description": ""}, {"name": "strength", "description": ""}, {"name": "distofinfluence", "description": " determine interaction kernel size input param spread = 0.0, Gaussian width of change of interaction strength"}, {"name": "remember", "description": " add Agent's opinions to global history variable for later plotting"}, {"name": "add_new_boom", "description": " alternative spawning recipe for new agents; baby-boom-like"}, {"name": "update", "description": "# \\fn update(self, date) cell state update function, interactions between random agents input param date current simulation date"}, {"name": "update_group", "description": " alternative update function using interactions between agent and all other agents input param date current simulation date"}]}, {"name": "OpinionGroup", "states": [{"name": "ID", "description": ""}, {"name": "time", "description": ""}, {"name": "Agents", "description": ""}, {"name": "meanOpinion", "description": ""}, {"name": "stdOpinion", "description": ""}, {"name": "successor", "description": ""}], "interactions & activities": [{"name": "__repr__", "description": " return string for representation in ipython"}, {"name": "find_successor", "description": " find successor given the new groups successor is defined as group with the highest number of common agents if no common agents found, generate a new group each group gets a timeline, up to consumption timelines will be plotted as before input param newgrouplist array of new groups"}]}], "Functions": [], "Simulation & Schedules": {"name": "simulation", "states": [{"name": "N", "description": "number of agents [1]"}, {"name": "pop", "description": ""}], "interactions & activities": [{"name": "__repr__", "description": " return string for representation in ipython"}, {"name": "simulate", "description": " and run simulation through all Tmax coarse timesteps"}, {"name": "update", "description": " update ensemble of Agents for 1 timestep, with updatesPerStep interactions input param time current simulation time"}, {"name": "get_group_variability", "description": " return all time_of_changes as a list, with number of group members as weight function"}]}, "Example Usage": ""}
