Examples:
Task: There is an agent-based model program that simulates the school life. The problem we want to address is "control the total number of students in the school".  The desired performance of the original program is:  as variable "total_num_student", it should be ranged in [90,120]. However, the simulation value is 155. 
Please first find relevant methods and variables corresponding to the variable "total_num_student". Then please utilize your inherent domain knowledge of "school life" to to analyze the reasons that did not satisfy the desired performance of addressing the problem "control the total number of students in the school", especially analyze what is missing in the existing models that has led to this failure. At last, please propose new policies as solutions to the problem we want to address. While providing solutions, do not remove existing methods or change existing parameters.and these solutions need to have practical significance and should not be limited to simple modifications of certain variable values.
Original program:
import random
#Define Agent class
class Student:
    def __init__(self, id, grade, is_attending=True):
        self.id = id
        self.grade = grade
        self.is_attending = is_attending

    def change_grade(self, new_grade):
        self.grade = new_grade
    
    def change_attendance(self, is_attending):
        self.is_attending = is_attending

class Teacher:
    def __init__(self, id):
        self.id = id

    def give_lecture(self, subject):
        print(f"Teacher {self.id} is giving a lecture on {subject}")

class School:
    def __init__(self, num_students, num_teachers):
        self.students = [Student(id, random.randint(1, 12)) for id in range(num_students)]
        self.teachers = [Teacher(id) for id in range(num_teachers)]
        self.total_num_students=num_students

    def enroll_student(self, student):
        self.students.append(student)
        self.total_num_students+=1
    
    def hire_teacher(self, teacher):
        self.teachers.append(teacher)

class Lecture:
    def __init__(self, school, subject):
        self.school = school
        self.subject = subject

    def start(self):
        for teacher in self.school.teachers:
            teacher.give_lecture(self.subject)

    def end(self):
        print("Lecture has ended.")
#Simulation Process
def simulation(num_students, num_teachers, subject):
    school = School(num_students, num_teachers)
    lecture = Lecture(school, subject)
    for student in school.students:
        new_grade = random.randint(1, 12)
        student.change_grade(new_grade)
    for i in range(10):
        lecture.start()
        for student in school.students:
            is_attending = random.choice([True, False])
            student.change_attendance(is_attending)
            if is_attending:
                student.change_grade(student.grade + 1)
        lecture.end()
        num_new_student = random.randint(10, 20)
        new_students = [Student(id, random.randint(1, graduate_grade)) for id in
                        range(len(school.students), len(school.students) + num_new_student)]
        for s in new_students:
            school.enroll_student(s)
#Example Usage
simulation(num_students=100, num_teachers=10, subject="Math",)


Relevant Relations & Reasons & Solutions:
Relevant Relations:
Be relevant to "total_num_students":  
1. Method  "enroll_students" , in the School class.
2. Function simulation. 
Reasons:
1. The original model does not have any constraints on the enrollment process, leading to a continuous increase in the number of students.
2. The original model does not have methods or standards to remove students from the school.
Solutions:
1. Introduce a maximum limit for the number of students in the School class. Limit the enrollment process when the number of students reaches the maximum limit.
   - Add a parameter "max_num_students" to the __init__ method of the School class.
   - Modify the enroll_student method in the School class to check if the maximum limit has been reached before enrolling a new student.
   - Adjust the simulation code to set the maximum limit for the number of students.
2. Implement a graduation system to ensure a balance between new enrollments and students graduating.
   - Add a variable "graduation_grade" to the School class to represent the grade at which students graduate.
   - Modify the simulation code to check if any student has reached the graduation grade before enrolling new students.
   - Implement a method in the School class to handle the graduation process and remove graduated students.


Task: There is an agent-based model program that simulates 